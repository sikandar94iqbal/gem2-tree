package Gem2Tree;

import java.util.List;
import java.util.Map;
import java.util.ArrayList;

public class GEM2Tree {
    GEM2Node root;
    int branchingFactor;

    public GEM2Tree(int minKey, int maxKey, int branchingFactor) {
        this.branchingFactor = branchingFactor;
        root = new GEM2Node(minKey, maxKey, false);
        initializeChildren(root, minKey, maxKey, 1);
    }

    private void initializeChildren(GEM2Node node, int minKey, int maxKey, int depth) {
        if (depth >= branchingFactor) {
            for (int i = minKey; i <= maxKey; i++) {
                GEM2Node child = new GEM2Node(i, i, true);
                node.children.add(child);
            }
        } else {
            int range = (maxKey - minKey + 1) / branchingFactor;
            for (int i = 0; i < branchingFactor; i++) {
                int lowerBound = minKey + i * range;
                int upperBound = (i == branchingFactor - 1) ? maxKey : (lowerBound + range - 1);
                GEM2Node child = new GEM2Node(lowerBound, upperBound, false);
                node.children.add(child);
                initializeChildren(child, lowerBound, upperBound, depth + 1);
            }
        }
    }

    // Insert an element into the GEM2-Tree
    public void insert(int key, String value) {
        GEM2Element element = new GEM2Element(key, value);
        insert(root, element);
    }

    private void insert(GEM2Node node, GEM2Element element) {
        if (node.isLeaf) {
            node.elements.add(element);
            node.elements.sort((e1, e2) -> Integer.compare(e1.key, e2.key));
            updateLabel(node);
        } else {
            GEM2Node childNode = getChildNodeForKey(node, element.key);
            insert(childNode, element);
            updateLabel(node);
        }
    }

    // Search for an element with a specific key
    public GEM2Element search(int key) {
        return search(root, key);
    }

    private GEM2Element search(GEM2Node node, int key) {
        if (node.isLeaf) {
            for (GEM2Element element : node.elements) {
                if (element.key == key) {
                    return element;
                }
            }
            return null;
        } else {
            GEM2Node childNode = getChildNodeForKey(node, key);
            return search(childNode, key);
        }
    }

    // Update the value of an element with a specific key
    public void update(int key, String newValue) {
        GEM2Element element = search(key);
        if (element != null) {
            element.value = newValue;
            updateLabels(root);
        }
    }

    // Delete an element with a specific key
    public void delete(int key) {
        delete(root, key);
    }

    private void delete(GEM2Node node, int key) {
        if (node.isLeaf) {
            node.elements.removeIf(element -> element.key == key);
            updateLabel(node);
        } else {
            GEM2Node childNode = getChildNodeForKey(node, key);
            delete(childNode, key);
            updateLabel(node);
        }
    }

    // Update labels recursively from the current node to its children
    private void updateLabels(GEM2Node node) {
        if (node.isLeaf) {
            updateLabel(node);
        } else {
            for (GEM2Node childNode : node.children) {
                updateLabels(childNode);
            }
            updateLabel(node);
        }
    }

    // Update label for a specific node
    private void updateLabel(GEM2Node node) {
        if (node.isLeaf) {
            StringBuilder sb = new StringBuilder();
            for (GEM2Element element : node.elements) {
                sb.append(element.key).append(element.value);
            }
            node.label = Utils.hash(sb.toString());
        } else {
            StringBuilder sb = new StringBuilder();
            for (GEM2Node childNode : node.children) {
                sb.append(childNode.label);
            }
            node.label = Utils.hash(sb.toString());
        }
    }

    // Get the appropriate child node for the specified key
    private GEM2Node getChildNodeForKey(GEM2Node node, int key) {
        for (GEM2Node childNode : node.children) {
            if (childNode.lowerBound <= key && key <= childNode.upperBound) {
                return childNode;
            }
        }
        return null;
    }
   
}
